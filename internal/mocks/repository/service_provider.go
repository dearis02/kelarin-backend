// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dbUtil "kelarin/internal/utils/dbutil"

	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"

	types "kelarin/internal/types"

	uuid "github.com/google/uuid"
)

// ServiceProvider is an autogenerated mock type for the ServiceProvider type
type ServiceProvider struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, tx, req
func (_m *ServiceProvider) Create(ctx context.Context, tx *sqlx.Tx, req types.ServiceProvider) error {
	ret := _m.Called(ctx, tx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, types.ServiceProvider) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *ServiceProvider) FindByID(ctx context.Context, ID uuid.UUID) (types.ServiceProvider, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 types.ServiceProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (types.ServiceProvider, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) types.ServiceProvider); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(types.ServiceProvider)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIDs provides a mock function with given fields: ctx, IDs
func (_m *ServiceProvider) FindByIDs(ctx context.Context, IDs []uuid.UUID) ([]types.ServiceProvider, error) {
	ret := _m.Called(ctx, IDs)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDs")
	}

	var r0 []types.ServiceProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]types.ServiceProvider, error)); ok {
		return rf(ctx, IDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []types.ServiceProvider); ok {
		r0 = rf(ctx, IDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ServiceProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, IDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByServiceID provides a mock function with given fields: ctx, serviceID
func (_m *ServiceProvider) FindByServiceID(ctx context.Context, serviceID uuid.UUID) (types.ServiceProvider, error) {
	ret := _m.Called(ctx, serviceID)

	if len(ret) == 0 {
		panic("no return value specified for FindByServiceID")
	}

	var r0 types.ServiceProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (types.ServiceProvider, error)); ok {
		return rf(ctx, serviceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) types.ServiceProvider); ok {
		r0 = rf(ctx, serviceID)
	} else {
		r0 = ret.Get(0).(types.ServiceProvider)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserID provides a mock function with given fields: ctx, userID
func (_m *ServiceProvider) FindByUserID(ctx context.Context, userID uuid.UUID) (types.ServiceProvider, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserID")
	}

	var r0 types.ServiceProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (types.ServiceProvider, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) types.ServiceProvider); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(types.ServiceProvider)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserIDs provides a mock function with given fields: ctx, IDs
func (_m *ServiceProvider) FindByUserIDs(ctx context.Context, IDs []uuid.UUID) ([]types.ServiceProvider, error) {
	ret := _m.Called(ctx, IDs)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserIDs")
	}

	var r0 []types.ServiceProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]types.ServiceProvider, error)); ok {
		return rf(ctx, IDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []types.ServiceProvider); ok {
		r0 = rf(ctx, IDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ServiceProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, IDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindForUpdateByID provides a mock function with given fields: ctx, tx, ID
func (_m *ServiceProvider) FindForUpdateByID(ctx context.Context, tx dbUtil.Tx, ID uuid.UUID) (types.ServiceProvider, error) {
	ret := _m.Called(ctx, tx, ID)

	if len(ret) == 0 {
		panic("no return value specified for FindForUpdateByID")
	}

	var r0 types.ServiceProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dbUtil.Tx, uuid.UUID) (types.ServiceProvider, error)); ok {
		return rf(ctx, tx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dbUtil.Tx, uuid.UUID) types.ServiceProvider); ok {
		r0 = rf(ctx, tx, ID)
	} else {
		r0 = ret.Get(0).(types.ServiceProvider)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dbUtil.Tx, uuid.UUID) error); ok {
		r1 = rf(ctx, tx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAsFeedbackGiven provides a mock function with given fields: ctx, tx, req
func (_m *ServiceProvider) UpdateAsFeedbackGiven(ctx context.Context, tx dbUtil.Tx, req types.ServiceProvider) error {
	ret := _m.Called(ctx, tx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAsFeedbackGiven")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbUtil.Tx, types.ServiceProvider) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCreditTx provides a mock function with given fields: ctx, req
func (_m *ServiceProvider) UpdateCreditTx(ctx context.Context, req types.ServiceProvider) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCreditTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ServiceProvider) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewServiceProvider creates a new instance of ServiceProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceProvider {
	mock := &ServiceProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
