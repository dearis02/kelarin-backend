// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dbUtil "kelarin/internal/utils/dbutil"

	mock "github.com/stretchr/testify/mock"

	types "kelarin/internal/types"

	uuid "github.com/google/uuid"
)

// Offer is an autogenerated mock type for the Offer type
type Offer struct {
	mock.Mock
}

// CountGroupByStatusByServiceProviderIDAndMonthAndYear provides a mock function with given fields: ctx, serviceProviderID, month, year
func (_m *Offer) CountGroupByStatusByServiceProviderIDAndMonthAndYear(ctx context.Context, serviceProviderID uuid.UUID, month int, year int) (map[types.OfferStatus]int64, error) {
	ret := _m.Called(ctx, serviceProviderID, month, year)

	if len(ret) == 0 {
		panic("no return value specified for CountGroupByStatusByServiceProviderIDAndMonthAndYear")
	}

	var r0 map[types.OfferStatus]int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) (map[types.OfferStatus]int64, error)); ok {
		return rf(ctx, serviceProviderID, month, year)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) map[types.OfferStatus]int64); ok {
		r0 = rf(ctx, serviceProviderID, month, year)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[types.OfferStatus]int64)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, serviceProviderID, month, year)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTx provides a mock function with given fields: ctx, tx, offer
func (_m *Offer) CreateTx(ctx context.Context, tx dbUtil.Tx, offer types.Offer) error {
	ret := _m.Called(ctx, tx, offer)

	if len(ret) == 0 {
		panic("no return value specified for CreateTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbUtil.Tx, types.Offer) error); ok {
		r0 = rf(ctx, tx, offer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllByServiceProviderID provides a mock function with given fields: ctx, serviceProviderID
func (_m *Offer) FindAllByServiceProviderID(ctx context.Context, serviceProviderID uuid.UUID) ([]types.Offer, error) {
	ret := _m.Called(ctx, serviceProviderID)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByServiceProviderID")
	}

	var r0 []types.Offer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]types.Offer, error)); ok {
		return rf(ctx, serviceProviderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []types.Offer); ok {
		r0 = rf(ctx, serviceProviderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Offer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, serviceProviderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByUserID provides a mock function with given fields: ctx, userID
func (_m *Offer) FindAllByUserID(ctx context.Context, userID uuid.UUID) ([]types.OfferWithServiceAndProvider, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByUserID")
	}

	var r0 []types.OfferWithServiceAndProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]types.OfferWithServiceAndProvider, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []types.OfferWithServiceAndProvider); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.OfferWithServiceAndProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *Offer) FindByID(ctx context.Context, ID uuid.UUID) (types.Offer, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 types.Offer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (types.Offer, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) types.Offer); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(types.Offer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIDAndServiceProviderID provides a mock function with given fields: ctx, ID, serviceProviderID
func (_m *Offer) FindByIDAndServiceProviderID(ctx context.Context, ID uuid.UUID, serviceProviderID uuid.UUID) (types.Offer, error) {
	ret := _m.Called(ctx, ID, serviceProviderID)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDAndServiceProviderID")
	}

	var r0 types.Offer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (types.Offer, error)); ok {
		return rf(ctx, ID, serviceProviderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) types.Offer); ok {
		r0 = rf(ctx, ID, serviceProviderID)
	} else {
		r0 = ret.Get(0).(types.Offer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, ID, serviceProviderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIDAndUserID provides a mock function with given fields: ctx, ID, userID
func (_m *Offer) FindByIDAndUserID(ctx context.Context, ID uuid.UUID, userID uuid.UUID) (types.Offer, error) {
	ret := _m.Called(ctx, ID, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDAndUserID")
	}

	var r0 types.Offer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (types.Offer, error)); ok {
		return rf(ctx, ID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) types.Offer); ok {
		r0 = rf(ctx, ID, userID)
	} else {
		r0 = ret.Get(0).(types.Offer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, ID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindForReportByServiceProviderID provides a mock function with given fields: ctx, serviceProviderID, month, year
func (_m *Offer) FindForReportByServiceProviderID(ctx context.Context, serviceProviderID uuid.UUID, month int, year int) (int64, []types.OfferForReport, error) {
	ret := _m.Called(ctx, serviceProviderID, month, year)

	if len(ret) == 0 {
		panic("no return value specified for FindForReportByServiceProviderID")
	}

	var r0 int64
	var r1 []types.OfferForReport
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) (int64, []types.OfferForReport, error)); ok {
		return rf(ctx, serviceProviderID, month, year)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) int64); ok {
		r0 = rf(ctx, serviceProviderID, month, year)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) []types.OfferForReport); ok {
		r1 = rf(ctx, serviceProviderID, month, year)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]types.OfferForReport)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, int, int) error); ok {
		r2 = rf(ctx, serviceProviderID, month, year)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindIDsWhereExpired provides a mock function with given fields: ctx, idsChan
func (_m *Offer) FindIDsWhereExpired(ctx context.Context, idsChan chan<- uuid.UUID) error {
	ret := _m.Called(ctx, idsChan)

	if len(ret) == 0 {
		panic("no return value specified for FindIDsWhereExpired")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, chan<- uuid.UUID) error); ok {
		r0 = rf(ctx, idsChan)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsPendingOfferExists provides a mock function with given fields: ctx, userID, serviceID
func (_m *Offer) IsPendingOfferExists(ctx context.Context, userID uuid.UUID, serviceID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, userID, serviceID)

	if len(ret) == 0 {
		panic("no return value specified for IsPendingOfferExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, userID, serviceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, userID, serviceID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, userID, serviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAsExpired provides a mock function with given fields: ctx, _tx, IDs
func (_m *Offer) UpdateAsExpired(ctx context.Context, _tx dbUtil.Tx, IDs uuid.UUIDs) error {
	ret := _m.Called(ctx, _tx, IDs)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAsExpired")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbUtil.Tx, uuid.UUIDs) error); ok {
		r0 = rf(ctx, _tx, IDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTx provides a mock function with given fields: ctx, tx, req
func (_m *Offer) UpdateTx(ctx context.Context, tx dbUtil.Tx, req types.Offer) error {
	ret := _m.Called(ctx, tx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbUtil.Tx, types.Offer) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOffer creates a new instance of Offer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOffer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Offer {
	mock := &Offer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
