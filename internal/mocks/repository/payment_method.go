// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "kelarin/internal/types"

	uuid "github.com/google/uuid"
)

// PaymentMethod is an autogenerated mock type for the PaymentMethod type
type PaymentMethod struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: ctx
func (_m *PaymentMethod) FindAll(ctx context.Context) ([]types.PaymentMethod, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []types.PaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]types.PaymentMethod, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []types.PaymentMethod); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.PaymentMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *PaymentMethod) FindByID(ctx context.Context, ID uuid.UUID) (types.PaymentMethod, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 types.PaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (types.PaymentMethod, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) types.PaymentMethod); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(types.PaymentMethod)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPaymentMethod creates a new instance of PaymentMethod. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentMethod(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentMethod {
	mock := &PaymentMethod{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
