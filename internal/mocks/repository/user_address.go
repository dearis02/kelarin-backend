// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "kelarin/internal/types"

	uuid "github.com/google/uuid"
)

// UserAddress is an autogenerated mock type for the UserAddress type
type UserAddress struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, address
func (_m *UserAddress) Create(ctx context.Context, address types.UserAddress) error {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.UserAddress) error); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByIDAndUserID provides a mock function with given fields: ctx, ID, userID
func (_m *UserAddress) FindByIDAndUserID(ctx context.Context, ID uuid.UUID, userID uuid.UUID) (types.UserAddress, error) {
	ret := _m.Called(ctx, ID, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDAndUserID")
	}

	var r0 types.UserAddress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (types.UserAddress, error)); ok {
		return rf(ctx, ID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) types.UserAddress); ok {
		r0 = rf(ctx, ID, userID)
	} else {
		r0 = ret.Get(0).(types.UserAddress)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, ID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserID provides a mock function with given fields: ctx, userID
func (_m *UserAddress) FindByUserID(ctx context.Context, userID uuid.UUID) ([]types.UserAddress, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserID")
	}

	var r0 []types.UserAddress
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]types.UserAddress, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []types.UserAddress); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.UserAddress)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, address
func (_m *UserAddress) Update(ctx context.Context, address types.UserAddress) error {
	ret := _m.Called(ctx, address)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.UserAddress) error); ok {
		r0 = rf(ctx, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserAddress creates a new instance of UserAddress. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserAddress(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserAddress {
	mock := &UserAddress{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
