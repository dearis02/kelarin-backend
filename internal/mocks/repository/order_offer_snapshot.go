// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dbUtil "kelarin/internal/utils/dbutil"

	mock "github.com/stretchr/testify/mock"

	types "kelarin/internal/types"

	uuid "github.com/google/uuid"
)

// OrderOfferSnapshot is an autogenerated mock type for the OrderOfferSnapshot type
type OrderOfferSnapshot struct {
	mock.Mock
}

// CreateTx provides a mock function with given fields: ctx, tx, req
func (_m *OrderOfferSnapshot) CreateTx(ctx context.Context, tx dbUtil.Tx, req types.OrderOfferSnapshot) error {
	ret := _m.Called(ctx, tx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbUtil.Tx, types.OrderOfferSnapshot) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByOrderID provides a mock function with given fields: ctx, orderID
func (_m *OrderOfferSnapshot) FindByOrderID(ctx context.Context, orderID uuid.UUID) (types.OrderOfferSnapshot, error) {
	ret := _m.Called(ctx, orderID)

	if len(ret) == 0 {
		panic("no return value specified for FindByOrderID")
	}

	var r0 types.OrderOfferSnapshot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (types.OrderOfferSnapshot, error)); ok {
		return rf(ctx, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) types.OrderOfferSnapshot); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Get(0).(types.OrderOfferSnapshot)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrderOfferSnapshot creates a new instance of OrderOfferSnapshot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderOfferSnapshot(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderOfferSnapshot {
	mock := &OrderOfferSnapshot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
