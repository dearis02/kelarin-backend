// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dbUtil "kelarin/internal/utils/dbutil"

	mock "github.com/stretchr/testify/mock"

	types "kelarin/internal/types"

	uuid "github.com/google/uuid"
)

// OfferNegotiation is an autogenerated mock type for the OfferNegotiation type
type OfferNegotiation struct {
	mock.Mock
}

// CreateTx provides a mock function with given fields: ctx, _tx, req
func (_m *OfferNegotiation) CreateTx(ctx context.Context, _tx dbUtil.Tx, req types.OfferNegotiation) error {
	ret := _m.Called(ctx, _tx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbUtil.Tx, types.OfferNegotiation) error); ok {
		r0 = rf(ctx, _tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllByOfferID provides a mock function with given fields: ctx, offerID
func (_m *OfferNegotiation) FindAllByOfferID(ctx context.Context, offerID uuid.UUID) ([]types.OfferNegotiation, error) {
	ret := _m.Called(ctx, offerID)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByOfferID")
	}

	var r0 []types.OfferNegotiation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]types.OfferNegotiation, error)); ok {
		return rf(ctx, offerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []types.OfferNegotiation); ok {
		r0 = rf(ctx, offerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.OfferNegotiation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, offerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIDAndUserID provides a mock function with given fields: ctx, ID, userID
func (_m *OfferNegotiation) FindByIDAndUserID(ctx context.Context, ID uuid.UUID, userID uuid.UUID) (types.OfferNegotiation, error) {
	ret := _m.Called(ctx, ID, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDAndUserID")
	}

	var r0 types.OfferNegotiation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (types.OfferNegotiation, error)); ok {
		return rf(ctx, ID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) types.OfferNegotiation); ok {
		r0 = rf(ctx, ID, userID)
	} else {
		r0 = ret.Get(0).(types.OfferNegotiation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, ID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByOfferIDAndStatus provides a mock function with given fields: ctx, offerID, status
func (_m *OfferNegotiation) FindByOfferIDAndStatus(ctx context.Context, offerID uuid.UUID, status types.OfferNegotiationStatus) (types.OfferNegotiation, error) {
	ret := _m.Called(ctx, offerID, status)

	if len(ret) == 0 {
		panic("no return value specified for FindByOfferIDAndStatus")
	}

	var r0 types.OfferNegotiation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, types.OfferNegotiationStatus) (types.OfferNegotiation, error)); ok {
		return rf(ctx, offerID, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, types.OfferNegotiationStatus) types.OfferNegotiation); ok {
		r0 = rf(ctx, offerID, status)
	} else {
		r0 = ret.Get(0).(types.OfferNegotiation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, types.OfferNegotiationStatus) error); ok {
		r1 = rf(ctx, offerID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByOfferIDsAndStatus provides a mock function with given fields: ctx, offerIDs, status
func (_m *OfferNegotiation) FindByOfferIDsAndStatus(ctx context.Context, offerIDs []uuid.UUID, status types.OfferNegotiationStatus) ([]types.OfferNegotiation, error) {
	ret := _m.Called(ctx, offerIDs, status)

	if len(ret) == 0 {
		panic("no return value specified for FindByOfferIDsAndStatus")
	}

	var r0 []types.OfferNegotiation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID, types.OfferNegotiationStatus) ([]types.OfferNegotiation, error)); ok {
		return rf(ctx, offerIDs, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID, types.OfferNegotiationStatus) []types.OfferNegotiation); ok {
		r0 = rf(ctx, offerIDs, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.OfferNegotiation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID, types.OfferNegotiationStatus) error); ok {
		r1 = rf(ctx, offerIDs, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusTx provides a mock function with given fields: ctx, tx, req
func (_m *OfferNegotiation) UpdateStatusTx(ctx context.Context, tx dbUtil.Tx, req types.OfferNegotiation) error {
	ret := _m.Called(ctx, tx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbUtil.Tx, types.OfferNegotiation) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOfferNegotiation creates a new instance of OfferNegotiation. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOfferNegotiation(t interface {
	mock.TestingT
	Cleanup(func())
}) *OfferNegotiation {
	mock := &OfferNegotiation{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
