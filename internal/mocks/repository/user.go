// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dbUtil "kelarin/internal/utils/dbutil"

	mock "github.com/stretchr/testify/mock"

	types "kelarin/internal/types"

	uuid "github.com/google/uuid"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, user
func (_m *User) Create(ctx context.Context, user types.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTx provides a mock function with given fields: ctx, _tx, user
func (_m *User) CreateTx(ctx context.Context, _tx dbUtil.Tx, user types.User) error {
	ret := _m.Called(ctx, _tx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbUtil.Tx, types.User) error); ok {
		r0 = rf(ctx, _tx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByEmail provides a mock function with given fields: ctx, email
func (_m *User) FindByEmail(ctx context.Context, email string) (types.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *User) FindByID(ctx context.Context, ID uuid.UUID) (types.User, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (types.User, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) types.User); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIDs provides a mock function with given fields: ctx, IDs
func (_m *User) FindByIDs(ctx context.Context, IDs uuid.UUIDs) ([]types.User, error) {
	ret := _m.Called(ctx, IDs)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDs")
	}

	var r0 []types.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUIDs) ([]types.User, error)); ok {
		return rf(ctx, IDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUIDs) []types.User); ok {
		r0 = rf(ctx, IDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUIDs) error); ok {
		r1 = rf(ctx, IDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUser creates a new instance of User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
