// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dbUtil "kelarin/internal/utils/dbutil"

	decimal "github.com/shopspring/decimal"

	mock "github.com/stretchr/testify/mock"

	types "kelarin/internal/types"

	uuid "github.com/google/uuid"
)

// Order is an autogenerated mock type for the Order type
type Order struct {
	mock.Mock
}

// CreateTx provides a mock function with given fields: ctx, tx, req
func (_m *Order) CreateTx(ctx context.Context, tx dbUtil.Tx, req types.Order) error {
	ret := _m.Called(ctx, tx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbUtil.Tx, types.Order) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllByServiceProviderID provides a mock function with given fields: ctx, serviceProviderID
func (_m *Order) FindAllByServiceProviderID(ctx context.Context, serviceProviderID uuid.UUID) ([]types.Order, error) {
	ret := _m.Called(ctx, serviceProviderID)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByServiceProviderID")
	}

	var r0 []types.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]types.Order, error)); ok {
		return rf(ctx, serviceProviderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []types.Order); ok {
		r0 = rf(ctx, serviceProviderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, serviceProviderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAllByUserID provides a mock function with given fields: ctx, userID
func (_m *Order) FindAllByUserID(ctx context.Context, userID uuid.UUID) ([]types.OrderWithServiceAndServiceProvider, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByUserID")
	}

	var r0 []types.OrderWithServiceAndServiceProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]types.OrderWithServiceAndServiceProvider, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []types.OrderWithServiceAndServiceProvider); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.OrderWithServiceAndServiceProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIDAndServiceProviderID provides a mock function with given fields: ctx, ID, serviceProviderID
func (_m *Order) FindByIDAndServiceProviderID(ctx context.Context, ID uuid.UUID, serviceProviderID uuid.UUID) (types.Order, error) {
	ret := _m.Called(ctx, ID, serviceProviderID)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDAndServiceProviderID")
	}

	var r0 types.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (types.Order, error)); ok {
		return rf(ctx, ID, serviceProviderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) types.Order); ok {
		r0 = rf(ctx, ID, serviceProviderID)
	} else {
		r0 = ret.Get(0).(types.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, ID, serviceProviderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIDAndUserID provides a mock function with given fields: ctx, ID, userID
func (_m *Order) FindByIDAndUserID(ctx context.Context, ID uuid.UUID, userID uuid.UUID) (types.OrderWithRelations, error) {
	ret := _m.Called(ctx, ID, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDAndUserID")
	}

	var r0 types.OrderWithRelations
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (types.OrderWithRelations, error)); ok {
		return rf(ctx, ID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) types.OrderWithRelations); ok {
		r0 = rf(ctx, ID, userID)
	} else {
		r0 = ret.Get(0).(types.OrderWithRelations)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, ID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByOfferID provides a mock function with given fields: ctx, offerID
func (_m *Order) FindByOfferID(ctx context.Context, offerID uuid.UUID) (types.OrderWithServiceAndServiceProvider, error) {
	ret := _m.Called(ctx, offerID)

	if len(ret) == 0 {
		panic("no return value specified for FindByOfferID")
	}

	var r0 types.OrderWithServiceAndServiceProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (types.OrderWithServiceAndServiceProvider, error)); ok {
		return rf(ctx, offerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) types.OrderWithServiceAndServiceProvider); ok {
		r0 = rf(ctx, offerID)
	} else {
		r0 = ret.Get(0).(types.OrderWithServiceAndServiceProvider)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, offerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByPaymentID provides a mock function with given fields: ctx, paymentID
func (_m *Order) FindByPaymentID(ctx context.Context, paymentID uuid.UUID) (types.OrderWithUserAndServiceProvider, error) {
	ret := _m.Called(ctx, paymentID)

	if len(ret) == 0 {
		panic("no return value specified for FindByPaymentID")
	}

	var r0 types.OrderWithUserAndServiceProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (types.OrderWithUserAndServiceProvider, error)); ok {
		return rf(ctx, paymentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) types.OrderWithUserAndServiceProvider); ok {
		r0 = rf(ctx, paymentID)
	} else {
		r0 = ret.Get(0).(types.OrderWithUserAndServiceProvider)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, paymentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindForReportByServiceProviderID provides a mock function with given fields: ctx, serviceProviderID, month, year
func (_m *Order) FindForReportByServiceProviderID(ctx context.Context, serviceProviderID uuid.UUID, month int, year int) (int64, []types.OrderForReport, error) {
	ret := _m.Called(ctx, serviceProviderID, month, year)

	if len(ret) == 0 {
		panic("no return value specified for FindForReportByServiceProviderID")
	}

	var r0 int64
	var r1 []types.OrderForReport
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) (int64, []types.OrderForReport, error)); ok {
		return rf(ctx, serviceProviderID, month, year)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) int64); ok {
		r0 = rf(ctx, serviceProviderID, month, year)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) []types.OrderForReport); ok {
		r1 = rf(ctx, serviceProviderID, month, year)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]types.OrderForReport)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, int, int) error); ok {
		r2 = rf(ctx, serviceProviderID, month, year)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindForReportExportByServiceProviderID provides a mock function with given fields: ctx, serviceProviderID
func (_m *Order) FindForReportExportByServiceProviderID(ctx context.Context, serviceProviderID uuid.UUID) ([]types.OrderForReportExport, error) {
	ret := _m.Called(ctx, serviceProviderID)

	if len(ret) == 0 {
		panic("no return value specified for FindForReportExportByServiceProviderID")
	}

	var r0 []types.OrderForReportExport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]types.OrderForReportExport, error)); ok {
		return rf(ctx, serviceProviderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []types.OrderForReportExport); ok {
		r0 = rf(ctx, serviceProviderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.OrderForReportExport)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, serviceProviderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTotalServiceFeeByServiceProviderIDAndStatusAndMonthAndYear provides a mock function with given fields: ctx, serviceProviderID, status, month, year
func (_m *Order) FindTotalServiceFeeByServiceProviderIDAndStatusAndMonthAndYear(ctx context.Context, serviceProviderID uuid.UUID, status types.OrderStatus, month int, year int) (decimal.Decimal, error) {
	ret := _m.Called(ctx, serviceProviderID, status, month, year)

	if len(ret) == 0 {
		panic("no return value specified for FindTotalServiceFeeByServiceProviderIDAndStatusAndMonthAndYear")
	}

	var r0 decimal.Decimal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, types.OrderStatus, int, int) (decimal.Decimal, error)); ok {
		return rf(ctx, serviceProviderID, status, month, year)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, types.OrderStatus, int, int) decimal.Decimal); ok {
		r0 = rf(ctx, serviceProviderID, status, month, year)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, types.OrderStatus, int, int) error); ok {
		r1 = rf(ctx, serviceProviderID, status, month, year)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAsPaymentFulfilledTx provides a mock function with given fields: ctx, tx, req
func (_m *Order) UpdateAsPaymentFulfilledTx(ctx context.Context, tx dbUtil.Tx, req types.Order) error {
	ret := _m.Called(ctx, tx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAsPaymentFulfilledTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbUtil.Tx, types.Order) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAsPaymentTx provides a mock function with given fields: ctx, tx, req
func (_m *Order) UpdateAsPaymentTx(ctx context.Context, tx dbUtil.Tx, req types.Order) error {
	ret := _m.Called(ctx, tx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAsPaymentTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbUtil.Tx, types.Order) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatusTx provides a mock function with given fields: ctx, tx, req
func (_m *Order) UpdateStatusTx(ctx context.Context, tx dbUtil.Tx, req types.Order) error {
	ret := _m.Called(ctx, tx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbUtil.Tx, types.Order) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrder creates a new instance of Order. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Order {
	mock := &Order{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
