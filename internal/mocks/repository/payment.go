// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dbUtil "kelarin/internal/utils/dbutil"

	mock "github.com/stretchr/testify/mock"

	types "kelarin/internal/types"

	uuid "github.com/google/uuid"
)

// Payment is an autogenerated mock type for the Payment type
type Payment struct {
	mock.Mock
}

// CreateTx provides a mock function with given fields: ctx, tx, req
func (_m *Payment) CreateTx(ctx context.Context, tx dbUtil.Tx, req types.Payment) error {
	ret := _m.Called(ctx, tx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbUtil.Tx, types.Payment) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *Payment) FindByID(ctx context.Context, ID uuid.UUID) (types.Payment, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 types.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (types.Payment, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) types.Payment); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(types.Payment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIDs provides a mock function with given fields: ctx, IDs
func (_m *Payment) FindByIDs(ctx context.Context, IDs uuid.UUIDs) ([]types.PaymentWithPaymentMethod, error) {
	ret := _m.Called(ctx, IDs)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDs")
	}

	var r0 []types.PaymentWithPaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUIDs) ([]types.PaymentWithPaymentMethod, error)); ok {
		return rf(ctx, IDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUIDs) []types.PaymentWithPaymentMethod); ok {
		r0 = rf(ctx, IDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.PaymentWithPaymentMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUIDs) error); ok {
		r1 = rf(ctx, IDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatusTx provides a mock function with given fields: ctx, tx, req
func (_m *Payment) UpdateStatusTx(ctx context.Context, tx dbUtil.Tx, req types.Payment) error {
	ret := _m.Called(ctx, tx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatusTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbUtil.Tx, types.Payment) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPayment creates a new instance of Payment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPayment(t interface {
	mock.TestingT
	Cleanup(func())
}) *Payment {
	mock := &Payment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
