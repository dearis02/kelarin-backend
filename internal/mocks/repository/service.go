// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	dbUtil "kelarin/internal/utils/dbutil"

	mock "github.com/stretchr/testify/mock"

	types "kelarin/internal/types"

	uuid "github.com/google/uuid"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateTx provides a mock function with given fields: ctx, _tx, req
func (_m *Service) CreateTx(ctx context.Context, _tx dbUtil.Tx, req types.Service) error {
	ret := _m.Called(ctx, _tx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbUtil.Tx, types.Service) error); ok {
		r0 = rf(ctx, _tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTx provides a mock function with given fields: ctx, _tx, service
func (_m *Service) DeleteTx(ctx context.Context, _tx dbUtil.Tx, service types.Service) error {
	ret := _m.Called(ctx, _tx, service)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbUtil.Tx, types.Service) error); ok {
		r0 = rf(ctx, _tx, service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAllByServiceProviderID provides a mock function with given fields: ctx, serviceProviderID
func (_m *Service) FindAllByServiceProviderID(ctx context.Context, serviceProviderID uuid.UUID) ([]types.Service, error) {
	ret := _m.Called(ctx, serviceProviderID)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByServiceProviderID")
	}

	var r0 []types.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]types.Service, error)); ok {
		return rf(ctx, serviceProviderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []types.Service); ok {
		r0 = rf(ctx, serviceProviderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, serviceProviderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *Service) FindByID(ctx context.Context, ID uuid.UUID) (types.Service, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 types.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (types.Service, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) types.Service); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(types.Service)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIDAndServiceProviderID provides a mock function with given fields: ctx, ID, serviceProviderID
func (_m *Service) FindByIDAndServiceProviderID(ctx context.Context, ID uuid.UUID, serviceProviderID uuid.UUID) (types.Service, error) {
	ret := _m.Called(ctx, ID, serviceProviderID)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDAndServiceProviderID")
	}

	var r0 types.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (types.Service, error)); ok {
		return rf(ctx, ID, serviceProviderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) types.Service); ok {
		r0 = rf(ctx, ID, serviceProviderID)
	} else {
		r0 = ret.Get(0).(types.Service)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, ID, serviceProviderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIDs provides a mock function with given fields: ctx, IDs
func (_m *Service) FindByIDs(ctx context.Context, IDs []uuid.UUID) ([]types.Service, error) {
	ret := _m.Called(ctx, IDs)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDs")
	}

	var r0 []types.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]types.Service, error)); ok {
		return rf(ctx, IDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []types.Service); ok {
		r0 = rf(ctx, IDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, IDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTx provides a mock function with given fields: ctx, _tx, req
func (_m *Service) UpdateTx(ctx context.Context, _tx dbUtil.Tx, req types.Service) error {
	ret := _m.Called(ctx, _tx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbUtil.Tx, types.Service) error); ok {
		r0 = rf(ctx, _tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
