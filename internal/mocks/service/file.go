// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "kelarin/internal/types"
)

// File is an autogenerated mock type for the File type
type File struct {
	mock.Mock
}

// BulkUploadToS3 provides a mock function with given fields: ctx, req, dir
func (_m *File) BulkUploadToS3(ctx context.Context, req []types.TempFile, dir string) ([]string, error) {
	ret := _m.Called(ctx, req, dir)

	if len(ret) == 0 {
		panic("no return value specified for BulkUploadToS3")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []types.TempFile, string) ([]string, error)); ok {
		return rf(ctx, req, dir)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []types.TempFile, string) []string); ok {
		r0 = rf(ctx, req, dir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []types.TempFile, string) error); ok {
		r1 = rf(ctx, req, dir)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteS3Object provides a mock function with given fields: ctx, objectKey
func (_m *File) DeleteS3Object(ctx context.Context, objectKey string) error {
	ret := _m.Called(ctx, objectKey)

	if len(ret) == 0 {
		panic("no return value specified for DeleteS3Object")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, objectKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTemp provides a mock function with given fields: ctx, fileName
func (_m *File) DeleteTemp(ctx context.Context, fileName string) error {
	ret := _m.Called(ctx, fileName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTemp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, fileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetS3PresignedURL provides a mock function with given fields: ctx, objectKey
func (_m *File) GetS3PresignedURL(ctx context.Context, objectKey string) (string, error) {
	ret := _m.Called(ctx, objectKey)

	if len(ret) == 0 {
		panic("no return value specified for GetS3PresignedURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, objectKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, objectKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, objectKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTemp provides a mock function with given fields: ctx, fileName
func (_m *File) GetTemp(ctx context.Context, fileName string) (types.FileGetTempRes, error) {
	ret := _m.Called(ctx, fileName)

	if len(ret) == 0 {
		panic("no return value specified for GetTemp")
	}

	var r0 types.FileGetTempRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.FileGetTempRes, error)); ok {
		return rf(ctx, fileName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.FileGetTempRes); ok {
		r0 = rf(ctx, fileName)
	} else {
		r0 = ret.Get(0).(types.FileGetTempRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreTemp provides a mock function with given fields: ctx, req
func (_m *File) StoreTemp(ctx context.Context, req types.FileUploadImagesReq) (types.FileUploadFilesRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for StoreTemp")
	}

	var r0 types.FileUploadFilesRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.FileUploadImagesReq) (types.FileUploadFilesRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.FileUploadImagesReq) types.FileUploadFilesRes); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(types.FileUploadFilesRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.FileUploadImagesReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFile creates a new instance of File. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *File {
	mock := &File{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
