// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "kelarin/internal/types"
)

// Chat is an autogenerated mock type for the Chat type
type Chat struct {
	mock.Mock
}

// ConsumerGetAll provides a mock function with given fields: ctx, req
func (_m *Chat) ConsumerGetAll(ctx context.Context, req types.ChatGetAllReq) ([]types.ChatConsumerGetAllRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ConsumerGetAll")
	}

	var r0 []types.ChatConsumerGetAllRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ChatGetAllReq) ([]types.ChatConsumerGetAllRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ChatGetAllReq) []types.ChatConsumerGetAllRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ChatConsumerGetAllRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ChatGetAllReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsumerGetByRoomID provides a mock function with given fields: ctx, req
func (_m *Chat) ConsumerGetByRoomID(ctx context.Context, req types.ChatGetByRoomIDReq) (types.ChatConsumerGetByRoomIDRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ConsumerGetByRoomID")
	}

	var r0 types.ChatConsumerGetByRoomIDRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ChatGetByRoomIDReq) (types.ChatConsumerGetByRoomIDRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ChatGetByRoomIDReq) types.ChatConsumerGetByRoomIDRes); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(types.ChatConsumerGetByRoomIDRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ChatGetByRoomIDReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChatRoom provides a mock function with given fields: ctx, req
func (_m *Chat) CreateChatRoom(ctx context.Context, req types.ChatChatRoomCreateReq) (types.ChatChatRoomCreateRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateChatRoom")
	}

	var r0 types.ChatChatRoomCreateRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ChatChatRoomCreateReq) (types.ChatChatRoomCreateRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ChatChatRoomCreateReq) types.ChatChatRoomCreateRes); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(types.ChatChatRoomCreateRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ChatChatRoomCreateReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleInboundMessage provides a mock function with given fields: client
func (_m *Chat) HandleInboundMessage(client *types.WsClient) {
	_m.Called(client)
}

// MarkReceivedAsSeen provides a mock function with given fields: ctx, req
func (_m *Chat) MarkReceivedAsSeen(ctx context.Context, req types.ChatMarkReceivedAsSeenReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for MarkReceivedAsSeen")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ChatMarkReceivedAsSeenReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProviderGetAll provides a mock function with given fields: ctx, req
func (_m *Chat) ProviderGetAll(ctx context.Context, req types.ChatGetAllReq) ([]types.ChatProviderGetAllRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ProviderGetAll")
	}

	var r0 []types.ChatProviderGetAllRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ChatGetAllReq) ([]types.ChatProviderGetAllRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ChatGetAllReq) []types.ChatProviderGetAllRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.ChatProviderGetAllRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ChatGetAllReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProviderGetByRoomID provides a mock function with given fields: ctx, req
func (_m *Chat) ProviderGetByRoomID(ctx context.Context, req types.ChatGetByRoomIDReq) (types.ChatProviderGetByRoomIDRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ProviderGetByRoomID")
	}

	var r0 types.ChatProviderGetByRoomIDRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ChatGetByRoomIDReq) (types.ChatProviderGetByRoomIDRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ChatGetByRoomIDReq) types.ChatProviderGetByRoomIDRes); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(types.ChatProviderGetByRoomIDRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ChatGetByRoomIDReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewChat creates a new instance of Chat. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChat(t interface {
	mock.TestingT
	Cleanup(func())
}) *Chat {
	mock := &Chat{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
