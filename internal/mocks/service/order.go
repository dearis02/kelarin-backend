// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "kelarin/internal/types"
)

// Order is an autogenerated mock type for the Order type
type Order struct {
	mock.Mock
}

// ConsumerGenerateQRCode provides a mock function with given fields: ctx, req
func (_m *Order) ConsumerGenerateQRCode(ctx context.Context, req types.OrderConsumerGenerateQRCodeReq) (types.OrderConsumerGenerateQRCodeRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ConsumerGenerateQRCode")
	}

	var r0 types.OrderConsumerGenerateQRCodeRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.OrderConsumerGenerateQRCodeReq) (types.OrderConsumerGenerateQRCodeRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.OrderConsumerGenerateQRCodeReq) types.OrderConsumerGenerateQRCodeRes); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(types.OrderConsumerGenerateQRCodeRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.OrderConsumerGenerateQRCodeReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsumerGetAll provides a mock function with given fields: ctx, req
func (_m *Order) ConsumerGetAll(ctx context.Context, req types.OrderConsumerGetAllReq) ([]types.OrderConsumerGetAllRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ConsumerGetAll")
	}

	var r0 []types.OrderConsumerGetAllRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.OrderConsumerGetAllReq) ([]types.OrderConsumerGetAllRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.OrderConsumerGetAllReq) []types.OrderConsumerGetAllRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.OrderConsumerGetAllRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.OrderConsumerGetAllReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsumerGetByID provides a mock function with given fields: ctx, req
func (_m *Order) ConsumerGetByID(ctx context.Context, req types.OrderConsumerGetByIDReq) (types.OrderConsumerGetByIDRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ConsumerGetByID")
	}

	var r0 types.OrderConsumerGetByIDRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.OrderConsumerGetByIDReq) (types.OrderConsumerGetByIDRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.OrderConsumerGetByIDReq) types.OrderConsumerGetByIDRes); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(types.OrderConsumerGetByIDRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.OrderConsumerGetByIDReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProviderFinish provides a mock function with given fields: ctx, req
func (_m *Order) ProviderFinish(ctx context.Context, req types.OrderProviderValidateQRCodeReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ProviderFinish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.OrderProviderValidateQRCodeReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProviderGetAll provides a mock function with given fields: ctx, req
func (_m *Order) ProviderGetAll(ctx context.Context, req types.OrderProviderGetAllReq) ([]types.OrderProviderGetAllRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ProviderGetAll")
	}

	var r0 []types.OrderProviderGetAllRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.OrderProviderGetAllReq) ([]types.OrderProviderGetAllRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.OrderProviderGetAllReq) []types.OrderProviderGetAllRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.OrderProviderGetAllRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.OrderProviderGetAllReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProviderGetByID provides a mock function with given fields: ctx, req
func (_m *Order) ProviderGetByID(ctx context.Context, req types.OrderProviderGetByIDReq) (types.OrderProviderGetByIDRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ProviderGetByID")
	}

	var r0 types.OrderProviderGetByIDRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.OrderProviderGetByIDReq) (types.OrderProviderGetByIDRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.OrderProviderGetByIDReq) types.OrderProviderGetByIDRes); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(types.OrderProviderGetByIDRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.OrderProviderGetByIDReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskUpdateOrderStatus provides a mock function with given fields: ctx
func (_m *Order) TaskUpdateOrderStatus(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TaskUpdateOrderStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrder creates a new instance of Order. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Order {
	mock := &Order{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
