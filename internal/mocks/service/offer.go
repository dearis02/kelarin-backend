// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "kelarin/internal/types"
)

// Offer is an autogenerated mock type for the Offer type
type Offer struct {
	mock.Mock
}

// ConsumerCreate provides a mock function with given fields: ctx, req
func (_m *Offer) ConsumerCreate(ctx context.Context, req types.OfferConsumerCreateReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ConsumerCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.OfferConsumerCreateReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConsumerGetAll provides a mock function with given fields: ctx, req
func (_m *Offer) ConsumerGetAll(ctx context.Context, req types.OfferConsumerGetAllReq) ([]types.OfferConsumerGetAllRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ConsumerGetAll")
	}

	var r0 []types.OfferConsumerGetAllRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.OfferConsumerGetAllReq) ([]types.OfferConsumerGetAllRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.OfferConsumerGetAllReq) []types.OfferConsumerGetAllRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.OfferConsumerGetAllRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.OfferConsumerGetAllReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConsumerGetByID provides a mock function with given fields: ctx, req
func (_m *Offer) ConsumerGetByID(ctx context.Context, req types.OfferConsumerGetByIDReq) (types.OfferConsumerGetByIDRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ConsumerGetByID")
	}

	var r0 types.OfferConsumerGetByIDRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.OfferConsumerGetByIDReq) (types.OfferConsumerGetByIDRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.OfferConsumerGetByIDReq) types.OfferConsumerGetByIDRes); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(types.OfferConsumerGetByIDRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.OfferConsumerGetByIDReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProviderAction provides a mock function with given fields: ctx, req
func (_m *Offer) ProviderAction(ctx context.Context, req types.OfferProviderActionReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ProviderAction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.OfferProviderActionReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProviderGetAll provides a mock function with given fields: ctx, req
func (_m *Offer) ProviderGetAll(ctx context.Context, req types.OfferProviderGetAllReq) ([]types.OfferProviderGetAllRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ProviderGetAll")
	}

	var r0 []types.OfferProviderGetAllRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.OfferProviderGetAllReq) ([]types.OfferProviderGetAllRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.OfferProviderGetAllReq) []types.OfferProviderGetAllRes); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.OfferProviderGetAllRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.OfferProviderGetAllReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProviderGetByID provides a mock function with given fields: ctx, req
func (_m *Offer) ProviderGetByID(ctx context.Context, req types.OfferProviderGetByIDReq) (types.OfferProviderGetByIDRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ProviderGetByID")
	}

	var r0 types.OfferProviderGetByIDRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.OfferProviderGetByIDReq) (types.OfferProviderGetByIDRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.OfferProviderGetByIDReq) types.OfferProviderGetByIDRes); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(types.OfferProviderGetByIDRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.OfferProviderGetByIDReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskMarkAsExpired provides a mock function with given fields: ctx
func (_m *Offer) TaskMarkAsExpired(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TaskMarkAsExpired")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOffer creates a new instance of Offer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOffer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Offer {
	mock := &Offer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
