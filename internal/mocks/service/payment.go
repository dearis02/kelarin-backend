// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"

	types "kelarin/internal/types"
)

// Payment is an autogenerated mock type for the Payment type
type Payment struct {
	mock.Mock
}

// CalculateAdminFee provides a mock function with given fields: amount, adminFee, adminFeeUnit
func (_m *Payment) CalculateAdminFee(amount decimal.Decimal, adminFee float32, adminFeeUnit types.PaymentMethodAdminFeeUnit) decimal.Decimal {
	ret := _m.Called(amount, adminFee, adminFeeUnit)

	if len(ret) == 0 {
		panic("no return value specified for CalculateAdminFee")
	}

	var r0 decimal.Decimal
	if rf, ok := ret.Get(0).(func(decimal.Decimal, float32, types.PaymentMethodAdminFeeUnit) decimal.Decimal); ok {
		r0 = rf(amount, adminFee, adminFeeUnit)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, req
func (_m *Payment) Create(ctx context.Context, req types.PaymentCreateReq) (types.PaymentCreateRes, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 types.PaymentCreateRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PaymentCreateReq) (types.PaymentCreateRes, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.PaymentCreateReq) types.PaymentCreateRes); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(types.PaymentCreateRes)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.PaymentCreateReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MidtransNotification provides a mock function with given fields: ctx, req
func (_m *Payment) MidtransNotification(ctx context.Context, req types.PaymentMidtransNotificationReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for MidtransNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PaymentMidtransNotificationReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPayment creates a new instance of Payment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPayment(t interface {
	mock.TestingT
	Cleanup(func())
}) *Payment {
	mock := &Payment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
