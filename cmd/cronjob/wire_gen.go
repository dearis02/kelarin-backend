// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"firebase.google.com/go/messaging"
	"github.com/aws/aws-sdk-go-v2/feature/s3/manager"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/elastic/go-elasticsearch/v8"
	"github.com/gorilla/websocket"
	"github.com/hibiken/asynq"
	"github.com/jmoiron/sqlx"
	"github.com/redis/go-redis/v9"
	"kelarin/internal/config"
	"kelarin/internal/provider"
	"kelarin/internal/queue/task"
	"kelarin/internal/repository"
	"kelarin/internal/service"
	"kelarin/internal/types"
	"kelarin/internal/utils/dbutil"
)

// Injectors from wire.go:

func newCronjob(db *sqlx.DB, mainDBTx dbUtil.SqlxTx, esDB *elasticsearch.TypedClient, config2 *config.Config, redis2 *redis.Client, queueClient *asynq.Client, s3Client *s3.Client, s3UploadManager *manager.Uploader, s3PresignClient *s3.PresignClient, firebaseMessagingClient *messaging.Client, wsUpgrader *websocket.Upgrader, wsHub *types.WsHub) *provider.Cronjob {
	offer := repository.NewOffer(db)
	userAddress := repository.NewUserAddress(db)
	repositoryService := repository.NewService(db)
	file := repository.NewFile(redis2)
	tempFile := task.NewTempFile(queueClient)
	serviceFile := service.NewFile(redis2, config2, file, tempFile, s3PresignClient, s3UploadManager, s3Client)
	serviceProvider := repository.NewServiceProvider(db)
	offerNegotiation := repository.NewOfferNegotiation(db)
	serviceProviderNotification := repository.NewServiceProviderNotification(db)
	fcmToken := repository.NewFCMToken(redis2)
	notification := service.NewNotification(db, firebaseMessagingClient, fcmToken)
	user := repository.NewUser(db)
	consumerNotification := repository.NewConsumerNotification(db)
	chatRoom := repository.NewChatRoom(db)
	chatRoomUser := repository.NewChatRoomUser(db)
	chatMessage := repository.NewChatMessage(db)
	order := repository.NewOrder(db)
	util := service.NewUtil()
	chat := service.NewChat(mainDBTx, repositoryService, user, chatRoom, chatRoomUser, chatMessage, wsHub, offer, serviceProvider, serviceFile, order, util)
	serviceOffer := service.NewOffer(mainDBTx, offer, userAddress, repositoryService, serviceFile, serviceProvider, offerNegotiation, serviceProviderNotification, fcmToken, notification, user, consumerNotification, chat, order, util)
	payment := repository.NewPayment(db)
	paymentMethod := repository.NewPaymentMethod(db)
	serviceFeedback := repository.NewServiceFeedback(db)
	serviceOrder := service.NewOrder(mainDBTx, order, serviceFile, util, serviceOffer, payment, paymentMethod, config2, serviceProvider, consumerNotification, serviceProviderNotification, fcmToken, notification, repositoryService, serviceFeedback)
	cronjob := provider.NewCronjob(db, redis2, queueClient, serviceOffer, serviceOrder)
	return cronjob
}
