// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"firebase.google.com/go/messaging"
	"github.com/alexliesenfeld/opencage"
	"github.com/aws/aws-sdk-go-v2/feature/s3/manager"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/elastic/go-elasticsearch/v8"
	"github.com/hibiken/asynq"
	"github.com/jmoiron/sqlx"
	"github.com/midtrans/midtrans-go/snap"
	"github.com/redis/go-redis/v9"
	"kelarin/internal/config"
	"kelarin/internal/handler"
	"kelarin/internal/middleware"
	"kelarin/internal/provider"
	"kelarin/internal/queue/task"
	"kelarin/internal/repository"
	"kelarin/internal/service"
)

// Injectors from wire.go:

func newServer(db *sqlx.DB, esDB *elasticsearch.TypedClient, config2 *config.Config, redis2 *redis.Client, s3UploadManager *manager.Uploader, queueClient *asynq.Client, s3Client *s3.Client, s3PresignClient *s3.PresignClient, opencageClient *opencage.Client, authMiddleware middleware.Auth, firebaseMessagingClient *messaging.Client, midtransSnapClient *snap.Client) (*provider.Server, error) {
	user := repository.NewUser(db)
	serviceUser := service.NewUser(user)
	handlerUser := handler.NewUser(serviceUser)
	session := repository.NewSession(redis2)
	pendingRegistration := repository.NewPendingRegistration(redis2)
	auth := service.NewAuth(config2, db, session, user, pendingRegistration)
	handlerAuth := handler.NewAuth(auth)
	file := repository.NewFile(redis2)
	tempFile := task.NewTempFile(queueClient)
	serviceFile := service.NewFile(redis2, config2, file, tempFile, s3PresignClient, s3UploadManager, s3Client)
	handlerFile := handler.NewFile(serviceFile)
	serviceProvider := repository.NewServiceProvider(db)
	province := repository.NewProvince(db)
	city := repository.NewCity(db)
	serviceProviderArea := repository.NewServiceProviderArea(db)
	geocoding := service.NewGeocoding(opencageClient)
	serviceServiceProvider := service.NewServiceProvider(db, serviceProvider, user, province, city, serviceProviderArea, pendingRegistration, serviceFile, geocoding)
	handlerServiceProvider := handler.NewServiceProvider(serviceServiceProvider, authMiddleware)
	serviceIndex := repository.NewServiceIndex(esDB)
	repositoryService := repository.NewService(db)
	serviceCategory := repository.NewServiceCategory(db)
	serviceServiceCategory := repository.NewServiceServiceCategory(db)
	serviceService := service.NewService(db, serviceIndex, serviceProvider, repositoryService, serviceCategory, serviceServiceCategory, serviceProviderArea, serviceFile)
	consumerService := service.NewConsumerService(serviceIndex, repositoryService, serviceProviderArea, serviceProvider, serviceFile)
	handlerService := handler.NewService(serviceService, consumerService, authMiddleware)
	serviceProvince := service.NewProvince(province)
	handlerProvince := handler.NewProvince(serviceProvince)
	serviceCity := service.NewCity(city)
	handlerCity := handler.NewCity(serviceCity)
	serviceCategory2 := service.NewServiceCategory(serviceCategory)
	handlerServiceCategory := handler.NewServiceCategory(serviceCategory2)
	userAddress := repository.NewUserAddress(db)
	serviceUserAddress := service.NewUserAddress(userAddress, geocoding)
	handlerUserAddress := handler.NewUserAddress(serviceUserAddress, authMiddleware)
	offer := repository.NewOffer(db)
	offerNegotiation := repository.NewOfferNegotiation(db)
	serviceProviderNotification := repository.NewServiceProviderNotification(db)
	fcmToken := repository.NewFCMToken(redis2)
	notification := service.NewNotification(db, firebaseMessagingClient, fcmToken)
	consumerNotification := repository.NewConsumerNotification(db)
	chatRoom := repository.NewChatRoom(db)
	chatRoomUser := repository.NewChatRoomUser(db)
	chatMessage := repository.NewChatMessage(db)
	chat := service.NewChat(user, chatRoom, chatRoomUser, chatMessage, offer, serviceProvider)
	order := repository.NewOrder(db)
	serviceOffer := service.NewOffer(offer, userAddress, repositoryService, serviceFile, serviceProvider, offerNegotiation, serviceProviderNotification, fcmToken, notification, user, db, consumerNotification, chat, order)
	handlerOffer := handler.NewOffer(serviceOffer, authMiddleware)
	serviceOfferNegotiation := service.NewOfferNegotiation(serviceProvider, offerNegotiation, offer, repositoryService, db, notification, fcmToken, serviceFile, consumerNotification)
	handlerOfferNegotiation := handler.NewOfferNegotiation(authMiddleware, serviceOfferNegotiation)
	handlerNotification := handler.NewNotification(notification, authMiddleware)
	payment := repository.NewPayment(db)
	paymentMethod := repository.NewPaymentMethod(db)
	midtrans := service.NewMidtrans(midtransSnapClient)
	servicePayment := service.NewPayment(config2, db, payment, paymentMethod, order, midtrans, notification, fcmToken, consumerNotification, serviceProviderNotification)
	handlerPayment := handler.NewPayment(servicePayment, authMiddleware)
	util := service.NewUtil()
	serviceOrder := service.NewOrder(order, serviceFile, util)
	handlerOrder := handler.NewOrder(serviceOrder, authMiddleware)
	server := provider.NewServer(handlerUser, handlerAuth, handlerFile, handlerServiceProvider, handlerService, handlerProvince, handlerCity, handlerServiceCategory, handlerUserAddress, handlerOffer, handlerOfferNegotiation, handlerNotification, handlerPayment, handlerOrder)
	return server, nil
}
