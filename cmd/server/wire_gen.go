// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/alexliesenfeld/opencage"
	"github.com/aws/aws-sdk-go-v2/feature/s3/manager"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/hibiken/asynq"
	"github.com/jmoiron/sqlx"
	"github.com/redis/go-redis/v9"
	"kelarin/internal/config"
	"kelarin/internal/handler"
	"kelarin/internal/middleware"
	"kelarin/internal/provider"
	"kelarin/internal/queue/task"
	"kelarin/internal/repository"
	"kelarin/internal/service"
)

// Injectors from wire.go:

func newServer(db *sqlx.DB, config2 *config.Config, redis2 *redis.Client, s3UploadManager *manager.Uploader, queueClient *asynq.Client, s3Client *s3.Client, s3PresignClient *s3.PresignClient, opencageClient *opencage.Client, authMiddleware middleware.Auth) (*provider.Server, error) {
	user := repository.NewUser(db)
	serviceUser := service.NewUser(user)
	handlerUser := handler.NewUser(serviceUser)
	session := repository.NewSession(redis2)
	pendingRegistration := repository.NewPendingRegistration(redis2)
	auth := service.NewAuth(config2, db, session, user, pendingRegistration)
	handlerAuth := handler.NewAuth(auth)
	file := repository.NewFile(redis2)
	tempFile := task.NewTempFile(queueClient)
	serviceFile := service.NewFile(redis2, config2, file, tempFile, s3PresignClient, s3UploadManager, s3Client)
	handlerFile := handler.NewFile(serviceFile)
	serviceProvider := repository.NewServiceProvider(db)
	province := repository.NewProvince(db)
	city := repository.NewCity(db)
	serviceProviderArea := repository.NewServiceProviderArea(db)
	geocoding := service.NewGeocoding(opencageClient)
	serviceServiceProvider := service.NewServiceProvider(db, serviceProvider, user, province, city, serviceProviderArea, pendingRegistration, serviceFile, geocoding)
	handlerServiceProvider := handler.NewServiceProvider(serviceServiceProvider, authMiddleware)
	server := provider.NewServer(handlerUser, handlerAuth, handlerFile, handlerServiceProvider)
	return server, nil
}
